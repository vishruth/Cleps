namespace System.Types
{
	public class Bool
	{
		rawtypemap System.LLVMTypes.I1;

		public System.LLVMTypes.I1 RawBoolean;

		public assignment = fn void (System.Types.Bool @valueToCopy)
		{
			RawBoolean = @valueToCopy.RawBoolean;
			return;
		};

		public operator == fn System.Types.Bool (System.Types.Bool @valueToCompare)
		{
			return RawBoolean == @valueToCompare.RawBoolean;
		};

		public operator != fn System.Types.Bool (System.Types.Bool @valueToCompare)
		{
			return RawBoolean != @valueToCompare.RawBoolean;
		};
	}

	public class Int32
	{
		rawtypemap System.LLVMTypes.I32;

		public System.LLVMTypes.I32 RawInteger;

		public assignment = fn void (System.Types.Int32 @valueToCopy)
		{
			RawInteger = @valueToCopy.RawInteger;
			return;
		};

		public operator == fn System.Types.Bool (System.Types.Int32 @valueToCompare)
		{
			return RawInteger == @valueToCompare.RawInteger;
		};

		public operator != fn System.Types.Bool (System.Types.Int32 @valueToCompare)
		{
			return RawInteger != @valueToCompare.RawInteger;
		};

		public operator <= fn System.Types.Bool (System.Types.Int32 @valueToCompare)
		{
			return RawInteger <= @valueToCompare.RawInteger;
		};

		public operator >= fn System.Types.Bool (System.Types.Int32 @valueToCompare)
		{
			return RawInteger >= @valueToCompare.RawInteger;
		};

		public operator < fn System.Types.Bool (System.Types.Int32 @valueToCompare)
		{
			return RawInteger < @valueToCompare.RawInteger;
		};

		public operator > fn System.Types.Bool (System.Types.Int32 @valueToCompare)
		{
			return RawInteger > @valueToCompare.RawInteger;
		};

		public operator + fn System.Types.Int32 (System.Types.Int32 @valueToAdd)
		{
			System.Types.Int32 @ret;
			@ret.RawInteger = RawInteger + @valueToAdd.RawInteger;
			return @ret;
		};

		public operator - fn System.Types.Int32 (System.Types.Int32 @valueToSub)
		{
			System.Types.Int32 @ret;
			@ret.RawInteger = RawInteger - @valueToSub.RawInteger;
			return @ret;
		};

		public operator * fn System.Types.Int32 (System.Types.Int32 @valueToMul)
		{
			System.Types.Int32 @ret;
			@ret.RawInteger = RawInteger * @valueToMul.RawInteger;
			return @ret;
		};

		public operator / fn System.Types.Int32 (System.Types.Int32 @valueToDiv)
		{
			System.Types.Int32 @ret;
			@ret.RawInteger = RawInteger / @valueToDiv.RawInteger;
			return @ret;
		};
	}
}